import 'dart:math';

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:kafe_app/data/kafe_plants_data.dart';
import 'package:kafe_app/logic/provider/field_count_provider.dart';
import 'package:kafe_app/logic/provider/stock_provider.dart';
import 'package:kafe_app/models/field.dart';
import 'package:kafe_app/logic/provider/exploitation_provider.dart';
import 'package:kafe_app/models/gato_scores.dart';
import 'package:kafe_app/models/kafe_type.dart';

import '../../constants/constants.dart';
import '../../logic/provider/user_provider.dart';
import '../../models/kafe_plant.dart';
import '../../models/stocks.dart';

class ExploitationView extends ConsumerWidget {
  ExploitationView({super.key});

  final fieldCountProvider = StateProvider<int>((ref) => 0);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final exploitation = ref.watch(exploitationNotifier);

    if (exploitation == null) {
      return const Center(child: CircularProgressIndicator());
    }

    final fields = exploitation.fields;

    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        title: Padding(
          padding: const EdgeInsets.only(left: 1.0),
          child: TextButton(
            style: TextButton.styleFrom(
              backgroundColor: colorTitle(),
              foregroundColor: backgroundItemsColor(),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(30),
              ),
              padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
            ),
            onPressed: () {
              _showBoutiqueModal(context, ref);
            },
            child: const Row(
              mainAxisSize: MainAxisSize.min,
              children: const [
                Icon(Icons.shopping_cart, size: 20),
                SizedBox(width: 8),
                Text('Boutique'),
              ],
            ),
          ),
        ),
      ),

      body: Padding(
        padding: const EdgeInsets.all(12.0),
        child: GridView.builder(
          itemCount: fields.length,
          gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
            crossAxisCount: 2,
            crossAxisSpacing: 10,
            mainAxisSpacing: 10,
            childAspectRatio: 1,
          ),
          itemBuilder: (context, index) {
            final field = fields[index];

            return GestureDetector(
              onTap: () {
                _showFieldDialog(context, ref, field);
              },
              child: Stack(
                children: [
                  Container(
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(12),
                      border: Border.all(color: colorOfText(), width: 2),
                      image: const DecorationImage(
                        image: AssetImage('assets/images/plant.png'),
                        fit: BoxFit.cover,
                      ),
                    ),
                  ),
                  Container(
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(12),
                      color: Colors.white.withOpacity(0.3),
                    ),
                  ),
                  Center(
                    child: Icon(Icons.add, size: 48, color: colorOfTextBlack()),
                  ),
                ],
              ),
            );
          },
        ),
      ),
    );
  }
}

void _showBoutiqueModal(BuildContext context, WidgetRef ref) {
  final plants = getKafePlants();
  final fieldCount = ref.read(fieldCountProvider.state).state;

  List<Map<String, dynamic>> boutiqueItems = [
    {
      'type': 'field',
      'name': 'Champ',
      'cost': 15,
      'icon': Icons.agriculture,
      'field': Field(
        name: generateFieldName(fieldCount + 1),
        plants: List.generate(4, (_) => KafePlant.empty()),
        speciality: FieldSpecialityExtension.getRandom(),
      ),
    },
    ...plants
        .map(
          (plant) => {
            'type': 'plante',
            'name': plant.name,
            'cost': plant.costDeeVee,
            'icon': Icons.eco,
            'kafeType': plant,
          },
        )
        .toList(),
  ];

  showDialog(
    context: context,
    builder: (BuildContext context) {
      return AlertDialog(
        contentPadding: EdgeInsets.zero,
        insetPadding: EdgeInsets.symmetric(horizontal: 32.0, vertical: 20.0),
        backgroundColor: backgroundItemsColor(),
        content: SizedBox(
          width: 350,
          height: 400,
          child: Column(
            children: [
              Expanded(
                child: SingleChildScrollView(
                  child: Column(
                    children:
                        boutiqueItems.map((item) {
                          return Column(
                            children: [
                              ListTile(
                                contentPadding: EdgeInsets.symmetric(
                                  vertical: 12.0,
                                ),
                                leading: Padding(
                                  padding: const EdgeInsets.only(left: 12.0),
                                  child: Icon(item['icon'], size: 40),
                                ),
                                title: Text(
                                  item['name'],
                                  style: TextStyle(
                                    fontSize: 18,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                                subtitle: Text(
                                  'Co√ªt: ${item['cost']}',
                                  style: TextStyle(fontSize: 16),
                                ),
                                trailing: IconButton(
                                  icon: Icon(
                                    Icons.add_shopping_cart,
                                    size: 30,
                                    color: colorOfText(),
                                  ),
                                  onPressed: () async {
                                    final user = ref.read(userNotifier);

                                    if (item['type'] == 'field') {
                                      await ref
                                          .read(exploitationNotifier.notifier)
                                          .addFieldToExploitation(
                                            item['field'],
                                          );

                                      ref
                                          .read(fieldCountProvider.state)
                                          .state++;
                                    } else if (item['type'] == 'plante') {
                                      ref
                                          .read(stockProvider.notifier)
                                          .addPlantToUserStock(
                                            item['kafeType'],
                                          );
                                    }

                                    Navigator.of(context).pop();
                                  },
                                ),
                              ),
                              Divider(thickness: 1),
                            ],
                          );
                        }).toList(),
                  ),
                ),
              ),
              Padding(
                padding: const EdgeInsets.symmetric(
                  horizontal: 16.0,
                  vertical: 16.0,
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    ElevatedButton(
                      onPressed: () {
                        Navigator.of(context).pop();
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor: colorTitle(),
                        foregroundColor: backgroundItemsColor(),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(30),
                        ),
                        padding: const EdgeInsets.symmetric(
                          horizontal: 20,
                          vertical: 12,
                        ),
                      ),
                      child: const Text('Fermer'),
                    ),

                    Consumer(
                      builder: (context, ref, child) {
                        final user = ref.watch(userNotifier);
                        final totalDeeVee = user?.deeVee ?? 0;

                        return Text(
                          '$totalDeeVee deeVee',
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                            color: colorTitle(),
                          ),
                        );
                      },
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      );
    },
  );
}

String generateFieldName(int fieldCount) {
  return 'Champ secondaire $fieldCount';
}

FieldSpeciality getRandomSpeciality() {
  List<FieldSpeciality> specialities = FieldSpeciality.values;

  Random random = Random();
  return specialities[random.nextInt(specialities.length)];
}

void _showFieldDialog(BuildContext context, WidgetRef ref, Field field) {
  showDialog(
    context: context,
    builder: (context) {
      return AlertDialog(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        insetPadding: const EdgeInsets.symmetric(
          horizontal: 32.0,
          vertical: 20.0,
        ),
        backgroundColor: backgroundItemsColor(),
        content: SizedBox(
          width: 350,
          height: 400,
          child: Column(
            children: [
              Padding(
                padding: const EdgeInsets.symmetric(vertical: 16.0),
                child: Center(
                  child: Text(
                    field.name,
                    style: TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                      color: colorTitle(),
                    ),
                  ),
                ),
              ),
              Padding(
                padding: const EdgeInsets.only(bottom: 12.0),
                child: Align(
                  alignment: Alignment.center,
                  child: Row(
                    children: [
                      Icon(Icons.grass, color: colorOfText()),
                      const SizedBox(width: 8),
                      Text(
                        "Sp√©cialit√© : ${_specialityToString(field.speciality)}",
                        style: TextStyle(fontSize: 18, color: colorOfText()),
                      ),
                    ],
                  ),
                ),
              ),
              const Divider(thickness: 1),
              Expanded(
                child: ListView.separated(
                  itemCount: field.plants.length,
                  separatorBuilder:
                      (context, index) => const Divider(thickness: 1),
                  itemBuilder: (context, index) {
                    final plant = field.plants[index];
                    final isEmpty = plant.isEmpty();

                    return Padding(
                      padding: const EdgeInsets.symmetric(
                        horizontal: 8.0,
                        vertical: 4.0,
                      ),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  "Emplacement ${index + 1}",
                                  style: TextStyle(
                                    fontSize: 18,
                                    fontWeight: FontWeight.w500,
                                    color: colorOfText(),
                                  ),
                                ),
                                if (!isEmpty)
                                  Text(
                                    plant.name,
                                    style: TextStyle(
                                      fontSize: 16,
                                      color: colorOfText(),
                                    ),
                                  ),
                              ],
                            ),
                          ),
                          if (isEmpty)
                            ElevatedButton(
                              onPressed: () {
                                _showPlantSelectionDialog(
                                  context,
                                  ref,
                                  field,
                                  index,
                                );
                              },
                              style: ElevatedButton.styleFrom(
                                backgroundColor: colorTitle(),
                                foregroundColor: backgroundItemsColor(),
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(20),
                                ),
                                padding: const EdgeInsets.symmetric(
                                  horizontal: 16,
                                  vertical: 8,
                                ),
                              ),
                              child: const Text("Planter"),
                            )
                          else if (plant.kafeType != null &&
                              plant.kafeType!.name.isNotEmpty)
                            ElevatedButton(
                              onPressed: () {
                                _harvestPlant(context, ref, field, index);
                              },
                              style: ElevatedButton.styleFrom(
                                backgroundColor: Colors.green,
                                foregroundColor: Colors.white,
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(20),
                                ),
                                padding: const EdgeInsets.symmetric(
                                  horizontal: 16,
                                  vertical: 8,
                                ),
                              ),
                              child: const Text("R√©colter"),
                            ),
                        ],
                      ),
                    );
                  },
                ),
              ),
              Padding(
                padding: const EdgeInsets.symmetric(
                  horizontal: 16.0,
                  vertical: 16.0,
                ),
                child: Align(
                  alignment: Alignment.centerLeft,
                  child: ElevatedButton(
                    onPressed: () {
                      Navigator.of(context).pop();
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: colorTitle(),
                      foregroundColor: backgroundItemsColor(),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(30),
                      ),
                      padding: const EdgeInsets.symmetric(
                        horizontal: 20,
                        vertical: 12,
                      ),
                    ),
                    child: const Text('Fermer'),
                  ),
                ),
              ),
            ],
          ),
        ),
      );
    },
  );
}

void _showPlantSelectionDialog(
  BuildContext context,
  WidgetRef ref,
  Field field,
  int plantIndex,
) {
  final plants = getKafePlants();

  showDialog(
    context: context,
    builder: (context) {
      return AlertDialog(
        title: Text("Choisir une plante"),
        content: SizedBox(
          width: double.maxFinite,
          child: ListView.builder(
            shrinkWrap: true,
            itemCount: plants.length,
            itemBuilder: (context, index) {
              final plant = plants[index];
              return ListTile(
                title: Text(plant.name),
                trailing: ElevatedButton(
                  onPressed: () async {
                    try {
                      await ref
                          .read(exploitationNotifier.notifier)
                          .planterGrainDansChamp(field.name, plant);
                      Navigator.of(context).pop();
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(
                          content: Text("${plant.name} plant√©e avec succ√®s!"),
                        ),
                      );

                      _showFieldDialog(context, ref, field);
                    } catch (e) {
                      Navigator.of(context).pop();
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(
                          content: Text(e.toString()),
                          backgroundColor: Colors.red,
                        ),
                      );
                    }
                  },
                  child: Text("Planter"),
                ),
              );
            },
          ),
        ),
      );
    },
  );
}

void _harvestPlant(
  BuildContext context,
  WidgetRef ref,
  Field field,
  int plantIndex,
) async {
  final plant = field.plants[plantIndex];

  if (plant.isEmpty() ||
      plant.kafeType == null ||
      plant.kafeType!.name.isEmpty) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text("Aucune plante valide √† r√©colter"),
        backgroundColor: Colors.red,
      ),
    );
    return;
  }

  try {
    await ref
        .read(stockProvider.notifier)
        .addRecolteToUserStock(plant.kafeType!);

    final updatedPlants = [...field.plants];
    updatedPlants[plantIndex] = KafePlant.empty();
    final updatedField = field.copyWith(plants: updatedPlants);

    await ref
        .read(exploitationNotifier.notifier)
        .updateField(field.name, updatedField);

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text("${plant.name} r√©colt√©e avec succ√®s!"),
        backgroundColor: Colors.green,
      ),
    );

    if (Navigator.of(context).canPop()) {
      Navigator.of(context).pop();
      _showFieldDialog(context, ref, updatedField);
    }
  } catch (e) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text("Erreur lors de la r√©colte: ${e.toString()}"),
        backgroundColor: Colors.red,
      ),
    );
  }
}

String _specialityToString(FieldSpeciality speciality) {
  switch (speciality) {
    case FieldSpeciality.rendementX2:
      return "Rendement x2";
    case FieldSpeciality.tempsDivPar2:
      return "Temps / 2";
    case FieldSpeciality.neutre:
    default:
      return "Neutre";
  }
}
