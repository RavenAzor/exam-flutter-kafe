import 'dart:math';

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:kafe_app/data/kafe_plants_data.dart';
import 'package:kafe_app/logic/provider/field_count_provider.dart';
import 'package:kafe_app/models/field.dart';
import 'package:kafe_app/logic/provider/exploitation_provider.dart';
import 'package:kafe_app/models/gato_scores.dart';
import 'package:kafe_app/models/kafe_type.dart';

import '../../constants/constants.dart';
import '../../logic/provider/user_provider.dart';
import '../../models/kafe_plant.dart';
import '../../models/stocks.dart';

class ExploitationView extends ConsumerWidget {
  ExploitationView({super.key});

  final fieldCountProvider = StateProvider<int>((ref) => 0);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final exploitation = ref.watch(exploitationNotifier);

    if (exploitation == null) {
      return const Center(child: CircularProgressIndicator());
    }

    final fields = exploitation.fields;

    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        title: Padding(
          padding: const EdgeInsets.only(left: 1.0),
          child: TextButton(
            style: TextButton.styleFrom(
              backgroundColor: colorTitle(),
              foregroundColor: backgroundItemsColor(),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(30),
              ),
              padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
            ),
            onPressed: () {
              _showBoutiqueModal(context, ref);
            },
            child: const Row(
              mainAxisSize: MainAxisSize.min,
              children: const [
                Icon(Icons.shopping_cart, size: 20),
                SizedBox(width: 8),
                Text('Boutique'),
              ],
            ),
          ),
        ),
      ),

      body: Padding(
        padding: const EdgeInsets.all(12.0),
        child: GridView.builder(
          itemCount: fields.length,
          gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
            crossAxisCount: 2,
            crossAxisSpacing: 10,
            mainAxisSpacing: 10,
            childAspectRatio: 1,
          ),
          itemBuilder: (context, index) {
            final field = fields[index];

            return GestureDetector(
              onTap: () {
                _showFieldDialog(context, field);
              },
              child: Stack(
                children: [
                  Container(
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(12),
                      border: Border.all(color: colorOfText(), width: 2),
                      image: const DecorationImage(
                        image: AssetImage('assets/images/plant.png'),
                        fit: BoxFit.cover,
                      ),
                    ),
                  ),
                  Container(
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(12),
                      color: Colors.white.withOpacity(0.3),
                    ),
                  ),
                  Center(
                    child: Icon(Icons.add, size: 48, color: colorOfTextBlack()),
                  ),
                ],
              ),
            );
          },
        ),
      ),
    );
  }
}

void _showBoutiqueModal(BuildContext context, WidgetRef ref) {
  final plants = getKafePlants();
  final fieldCount = ref.read(fieldCountProvider.state).state;

  List<Map<String, dynamic>> boutiqueItems = [
    {
      'type': 'field',
      'name': 'Champ',
      'cost': 15,
      'icon': Icons.agriculture,
      'field': Field(
        name: generateFieldName(fieldCount + 1),
        plants: List.generate(4, (_) => KafePlant.empty()),
        speciality: FieldSpecialityExtension.getRandom(),
      ),
    },
    ...plants
        .map(
          (plant) => {
            'type': 'plante',
            'name': plant.name,
            'cost': plant.costDeeVee,
            'icon': Icons.eco,
            'kafeType': plant,
          },
        )
        .toList(),
  ];

  showDialog(
    context: context,
    builder: (BuildContext context) {
      return AlertDialog(
        contentPadding: EdgeInsets.zero,
        insetPadding: EdgeInsets.symmetric(horizontal: 32.0, vertical: 20.0),
        backgroundColor: backgroundItemsColor(),
        content: SizedBox(
          width: 350,
          height: 400,
          child: Column(
            children: [
              Expanded(
                child: SingleChildScrollView(
                  child: Column(
                    children:
                        boutiqueItems.map((item) {
                          return Column(
                            children: [
                              ListTile(
                                contentPadding: EdgeInsets.symmetric(
                                  vertical: 12.0,
                                ),
                                leading: Padding(
                                  padding: const EdgeInsets.only(left: 12.0),
                                  child: Icon(item['icon'], size: 40),
                                ),
                                title: Text(
                                  item['name'],
                                  style: TextStyle(
                                    fontSize: 18,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                                subtitle: Text(
                                  'Coût: ${item['cost']}',
                                  style: TextStyle(fontSize: 16),
                                ),
                                trailing: IconButton(
                                  icon: Icon(
                                    Icons.add_shopping_cart,
                                    size: 30,
                                    color: colorOfText(),
                                  ),
                                  onPressed: () async {
                                    final user = ref.read(userNotifier);

                                    if (item['type'] == 'field') {
                                      // Ajoute le champ à l'exploitation
                                      await ref
                                          .read(exploitationNotifier.notifier)
                                          .addFieldToExploitation(
                                            item['field'],
                                          );

                                      // Incrémente le compteur de champs
                                      ref
                                          .read(fieldCountProvider.state)
                                          .state++;
                                    } else if (item['type'] == 'plante') {
                                      ref
                                          .read(userNotifier.notifier)
                                          .addPlantToUserStock(
                                            item['kafeType'],
                                          );
                                    }

                                    Navigator.of(context).pop();
                                  },
                                ),
                              ),
                              Divider(thickness: 1),
                            ],
                          );
                        }).toList(),
                  ),
                ),
              ),
              Padding(
                padding: const EdgeInsets.symmetric(
                  horizontal: 16.0,
                  vertical: 16.0,
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    // Le bouton Fermer
                    ElevatedButton(
                      onPressed: () {
                        Navigator.of(context).pop();
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor:
                            colorTitle(), // Couleur de fond (remplace par la couleur que tu souhaites)
                        foregroundColor:
                            backgroundItemsColor(), // Couleur du texte (remplace par la couleur que tu souhaites)
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(
                            30,
                          ), // Bord arrondi pour le bouton
                        ),
                        padding: const EdgeInsets.symmetric(
                          horizontal: 20,
                          vertical: 12,
                        ), // Padding autour du texte
                      ),
                      child: const Text('Fermer'),
                    ),
                    // Affichage des deeVee
                    Consumer(
                      builder: (context, ref, child) {
                        final user = ref.watch(userNotifier);
                        final totalDeeVee = user?.deeVee ?? 0;

                        return Text(
                          '$totalDeeVee deeVee',
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                            color:
                                colorTitle(), // Remplace par la couleur que tu veux
                          ),
                        );
                      },
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      );
    },
  );
}

// Génère un nom pour le champ secondaire, basé sur le nombre de champs existants
String generateFieldName(int fieldCount) {
  return 'Champ secondaire $fieldCount';
}

// Fonction pour obtenir une spécialité aléatoire
FieldSpeciality getRandomSpeciality() {
  List<FieldSpeciality> specialities = FieldSpeciality.values;

  Random random = Random();
  return specialities[random.nextInt(specialities.length)];
}

// Fonction pour afficher la modale de détail du champ
void _showFieldDialog(BuildContext context, Field field) {
  showDialog(
    context: context,
    builder: (context) {
      return AlertDialog(
        title: Text(field.name),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text("Spécialité : ${_specialityToString(field.speciality)}"),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                Navigator.of(context).pop();

                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text("Action planter à implémenter")),
                );
              },
              child: const Text("Planter une graine"),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text("Fermer"),
          ),
        ],
      );
    },
  );
}

String _specialityToString(FieldSpeciality speciality) {
  switch (speciality) {
    case FieldSpeciality.rendementX2:
      return "Rendement x2";
    case FieldSpeciality.tempsDivPar2:
      return "Temps / 2";
    case FieldSpeciality.neutre:
    default:
      return "Neutre";
  }
}
