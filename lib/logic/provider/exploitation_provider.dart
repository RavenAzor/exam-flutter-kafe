import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:kafe_app/logic/provider/stock_provider.dart';
import 'package:kafe_app/models/exploitation.dart';
import 'package:kafe_app/models/kafe_plant.dart';
import 'package:kafe_app/models/kafe_type.dart';

import '../../models/field.dart';

final exploitationNotifier =
    StateNotifierProvider<ExploitationNotifier, Exploitation?>(
      (ref) => ExploitationNotifier(ref: ref),
    );

class ExploitationNotifier extends StateNotifier<Exploitation?> {
  final Ref ref;

  ExploitationNotifier({required this.ref, Exploitation? state}) : super(state);

  Future<void> createExploitation(Exploitation exploitation) async {
    try {
      final docRef = await FirebaseFirestore.instance
          .collection('exploitations')
          .add(exploitation.toMap());

      await docRef.update({'userId': exploitation.userId});

      await docRef.update({'id': docRef.id});
      state = exploitation.copyWith(id: docRef.id);
    } catch (e) {
      print('Erreur création exploitation: $e');
    }
  }

  Future<void> getExploitationByUserId(String userId) async {
    try {
      final snapshot =
          await FirebaseFirestore.instance
              .collection('exploitations')
              .where('userId', isEqualTo: userId)
              .get();

      if (snapshot.docs.isNotEmpty) {
        state = Exploitation.fromMap({
          ...snapshot.docs.first.data(),
          'id': snapshot.docs.first.id,
        });
      }
    } catch (e) {
      print('Erreur récupération exploitation: $e');
    }
  }

  Future<void> addFieldToExploitation(Field newField) async {
    if (state != null) {
      final updatedExploitation = state!.copyWith(
        fields: [...state!.fields, newField],
      );

      state = updatedExploitation;

      try {
        await FirebaseFirestore.instance
            .collection('exploitations')
            .doc(state!.id)
            .update({
              'fields':
                  updatedExploitation.fields.map((f) => f.toMap()).toList(),
            });

        print("Champ ajouté à l'exploitation de l'utilisateur");
      } catch (e) {
        print('Erreur lors de l\'ajout du champ à Firestore: $e');
      }
    }
  }

  Future<void> updateExploitation(Exploitation updated) async {
    try {
      if (updated.id == null) return;
      await FirebaseFirestore.instance
          .collection('exploitations')
          .doc(updated.id)
          .update(updated.toMap());

      state = updated;
    } catch (e) {
      print('Erreur mise à jour exploitation: $e');
    }
  }

  Future<void> planterGrainDansChamp(String fieldName, KafeType plant) async {
    final stock = await ref.read(stockProvider).getUserStock();

    if (stock == null || (stock.plantsQuantities[plant.name] ?? 0) <= 0) {
      throw Exception(
        "Vous n'avez pas cette graine dans votre stock ou il n'en reste plus !",
      );
    }

    final exploitation = state;
    if (exploitation == null) throw Exception("Aucune exploitation trouvée");

    final fields = exploitation.fields;
    final index = fields.indexWhere((f) => f.name == fieldName);
    if (index == -1) throw Exception("Champ introuvable");

    final field = fields[index];

    final emptyIndex = field.plants.indexWhere((p) => p.isEmpty());
    if (emptyIndex == -1) throw Exception("Champ plein !");

    final updatedPlants = [...field.plants];
    updatedPlants[emptyIndex] = KafePlant.fromKafeType(plant);

    final updatedField = field.copyWith(plants: updatedPlants);

    final updatedFields = [...fields];
    updatedFields[index] = updatedField;

    final updatedExploitation = exploitation.copyWith(fields: updatedFields);

    state = updatedExploitation;

    try {
      await FirebaseFirestore.instance
          .collection('exploitations')
          .doc(exploitation.id)
          .update(updatedExploitation.toMap());
      print("Graine plantée dans le champ avec succès.");
    } catch (e) {
      print('Erreur lors de la mise à jour du champ dans Firestore: $e');
    }

    await ref.read(stockProvider).removeGrain(plant);
  }

  Future<void> updateField(String fieldName, Field updatedField) async {
    final exploitation = state;
    if (exploitation == null) throw Exception("Aucune exploitation trouvée");

    final index = exploitation.fields.indexWhere((f) => f.name == fieldName);
    if (index == -1) throw Exception("Champ introuvable");

    final updatedFields = [...exploitation.fields];
    updatedFields[index] = updatedField;

    final updatedExploitation = exploitation.copyWith(fields: updatedFields);

    state = updatedExploitation;

    try {
      await FirebaseFirestore.instance
          .collection('exploitations')
          .doc(exploitation.id)
          .update(updatedExploitation.toMap());
      print("Champ mis à jour dans l'exploitation de l'utilisateur");
    } catch (e) {
      print('Erreur lors de la mise à jour du champ dans Firestore: $e');
    }
  }
}
